@model SmartSchool.Models.VirtualClassRoom.VirtualClassRoom

@{
    Languges CurrentLanguage = ViewBag.CurrentLanguage;

}
<style>
    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #ebeef3;
        border: none;
        border-radius: 10px;
        display: inline-block;
        margin-left: 5px;
        margin-top: 5px;
        padding: 5px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove,
    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover,
    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:focus,
    .select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {
        background-color: #eb6177;
        border: none;
        border-radius: 10px;
        border-right: none;
        border-top-left-radius: none;
        border-bottom-left-radius: none;
        color: #ffff;
        cursor: pointer;
        font-size: 1em;
        font-weight: bold;
        padding: 0px 4px;
        height: 25px;
        width: 25px;
    }

    .sorting_asc {
        display: none;
    }

    .btn-primary {
        background-image: none;
    }

        .btn-primary, .btn-primary.active.focus, .btn-primary.active:focus, .btn-primary.active:hover, .btn-primary:active.focus, .btn-primary:active:focus, .btn-primary:active:hover,
        .open > .dropdown-toggle.btn-primary.focus, .open > .dropdown-toggle.btn-primary:focus, .open > .dropdown-toggle.btn-primary:hover,
        .btn-primary:focus, .btn-primary:hover {
            color: #fff;
            background-color: #3699ff;
            border-color: #3699ff;
            border: none;
            outline: none;
        }

            .btn-primary:focus, .btn-primary:hover {
                background-position: unset;
            }

            .btn-primary:hover {
                color: #fff;
                background-color: #3699ff;
                border-color: #3699ff;
            }

    #Listrecipient {
        height: auto;
        max-height: 350px;
        overflow: auto;
    }

    .Mail-holder {
        width: 100%;
        display: flex;
        justify-content: space-between;
        padding: 10px;
    }

        .Mail-holder > button {
            /*width: 100px;*/
            margin: 0px 5px;
            border-radius: 10px;
            background-color: #3699ff;
        }

    .select2-container--default.select2-container--focus .select2-selection--multiple {
        border: solid #d7c9c9 1px;
    }

    .select2-container--default.select2-container .select2-selection--multiple {
        border-radius: 10px;
        padding: 5px;
    }
    /* The holder-raido */
    .holder-raido {
        display: block;
        position: relative;
        padding-left: 35px;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 22px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* Hide the browser's default checkbox */
        .holder-raido input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }

    /* Create a custom checkbox */
    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 25px;
        width: 25px;
        border: solid 1px #ba9090;
        border-radius: 5px;
    }

    /* On mouse-over, add a grey background color */
    .holder-raido:hover input ~ .checkmark {
        background-color: #ccc;
    }

    /* When the checkbox is checked, add a blue background */
    .holder-raido input:checked ~ .checkmark {
        background-color: #3699ff;
        border: none;
        outline: none;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    .holder-raido input:checked ~ .checkmark:after {
        display: block;
    }

    /* Style the checkmark/indicator */
    .holder-raido .checkmark:after {
        left: 9px;
        top: 5px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 3px 3px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    .item-holder {
        width: 100%;
        list-style: none;
        padding: 10px 5px;
    }

        .item-holder > li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 5px;
            border: solid 1px #ccc;
            margin-bottom: 5px;
            padding: 0px 10px;
            transition: all ease 0.5s;
            height: 80px;
        }

            .item-holder > li:hover {
                transition: all ease 0.5s;
                border: solid 1px #3699ff;
                box-shadow: 1px 1px 5px 0 rgba(0,0,0,.26);
            }

            .item-holder > li > div > span {
                padding: 7px;
                letter-spacing: 2.5px;
                border-top-right-radius: 15px;
                border-bottom-left-radius: 15px;
                box-shadow: 1px 1px 5px 0 rgba(0,0,0,.26);
                background: #3699ff;
                color: white;
            }

            .item-holder > li:first-child {
                background: #fff9f9;
            }

    #teamsUserContainer {
        display: flex;
    }

        #teamsUserContainer > img {
            width: 95px;
        }

        #teamsUserContainer > div {
            padding: 0px 10px;
            display: flex;
            flex-direction: column;
        }

    .light-btn {
        text-align: center;
        padding: 10px;
        text-decoration: none !important;
        border-radius: 5px;
        font-size: 18px;
        box-shadow: 0px 3px 5px #afb5fc;
    }

    #CreateMeeting {
        border: none !important;
        outline: none !important;
    }
    .Meeting-holder{
        display:flex;
        justify-content:flex-end;
        width:100%;
        padding:10px;
    }
</style>
<div class="head-body-col">
    <span>
        <!-- back  icon-->
        <a onclick="goBack()" style="color:#fff"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
    </span>
    <h2>@R.GetResource("VirtualClassRoom")</h2>
</div>
@Html.HiddenFor(a=>a.hfAccessToken)
<div class="inner-Container">


    <div class="light-component action">
        <a href="javascript:void(0)" style="width:250px">
            <span>
                <i class="fa fa-send" aria-hidden="true"></i>
            </span>
            <h4>
                @R.GetResource("VirtualClassRoom")
            </h4>
        </a>
    </div>


    <div class="light-component inner">
        <div class="Mail-holder">
            <a id="SignIn" href="#" style="width:250px">
                <img src="~/AppContent/MSTeamsImages/loginmicrosoft.png" />
            </a>
            <div class="form-group" id="teamsUserContainer" style="display: none;">
                <img src="~/AppContent/Images/Microsoft_logo.jpg" />
                <div style=" padding: 0px 10px;display: flex;flex-direction: column;">
                    <label class="form-label" style="color: #7070d3;">Login via Microsoft</label>
                    <label class="form-label" id="welcomeMessage" style="margin-bottom: 10px;">
                    </label>
                    <a href="#" id="signout" class="light-btn">
                        <i class="fa fa-sign-out" aria-hidden="true"></i>
                        SignOut
                    </a>
                </div>

            </div>
        </div>
    </div>

    <div class="light-component inner">
        <div class="Mail-holder">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">@R.GetResource("Addstudentstothesession")</button>
            <select class="js-example-basic-multiple" name="recipient[]" multiple="multiple" id="recipientSelect"></select>
        </div>
        <div class="Meeting-holder" style="justify-content:space-between">
             <div>
                <input type="checkbox" id="SendSmsChk" style="margin:5px;" />

                @if (CurrentLanguage == Languges.English)
                {
                    <label>Send sms within join url to the selected students</label>
                }
                else
                {
                    <label> إرسال رسالة نصية برابط الحصة للطلبة المختارين</label>
                }
            </div>
            <button type="button" id="CreateMeeting"  class="JoinMS-btn">
                <img src="~/AppContent/Images/microsoft-teams-logo.png" style="width: 50px;" />
                @R.GetResource("CreateMeeting")
            </button>
            <a href="" target="_blank" class="JoinMS-btn" id="StartMeeting" style="display:none">
                <img src="~/AppContent/Images/microsoft-teams-logo.png" style="width: 50px;" />
                @R.GetResource("StartMeeting")
            </a>
            @*<button type="button" id="EndMeeting" style="background-color:white; box-shadow:5px 5px #961427;display:none;justify-content:space-around;">
            <img src="~/AppContent/MSTeamsImages/teams.png" height="30" width="30" />
            @R.GetResource("End Meeting")
        </button>*@
        </div>

    

    </div>


</div>



<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@R.GetResource("Addstudentstothesession")</h4>
            </div>
            <div class="modal-body">
                <div class="row">
         
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>@R.GetResource("Class")</label>
                            @Html.EditorFor(model => model.SchoolClassID, "SelectListRequired", new { List = Model.Classes, Disabled = false })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>@R.GetResource("Section")</label>
                            <select name="sectionId" id="sectionId" class="form-control select2" required="required" Disabled="Disabled"></select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>@R.GetResource("Subject")</label>
                            <select name="SubjectID" id="SubjectID" class="form-control select2" required="required" Disabled="Disabled"></select>
                        </div>
                    </div>
                </div>
                <div class="row">

                    <div class="col-lg-12">
                        <button class="btn btn-primary-custom forms" style="padding:10px 20px;" type="button" id="btnFilterRec">@R.GetResource("Search")</button>

                    </div>
                </div>
                <div class="row" id="Listrecipient">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="CloseModal">@R.GetResource("Close")</button>
                <button class="btn btn-primary-custom" type="button" onclick="SetRecipient()">@R.GetResource("Savecontinue")</button>
            </div>
        </div>
    </div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://statics.teams.cdn.office.net/sdk/v1.7.0/js/MicrosoftTeams.min.js" integrity="sha384-00JbifySIlPvW32u9rSurgu8PujfL6XFdV9iNn4ZWyurJJ33MFvpwPqmCHDq9ADv" crossorigin="anonymous"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js"></script>
<script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.0/js/msal.js"></script>

<script>



    //##***********************MICROSOFT TEAMS INTEGRATION SCRIPTS SECTION*****************************##\\


    function ValidateMeeting() {
        debugger;

        myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
            // xhr.setRequestHeader("Authorization", "Bearer " + tokenResponse.accessToken);
            $('#hfAccessToken').val(tokenResponse.accessToken);
        });

        return true;
    }

    var msalConfig = {
        auth: {
            clientId: '@Model.MsClientID', //This is your client ID
            authority: 'https://login.microsoftonline.com/@Model.MsTenantID' //This is your tenant info
        },
        cache: {
            cacheLocation: "localStorage",
            storeAuthStateInCookie: true
        }
    };

    var graphConfig = {
        graphMeEndpoint: "https://graph.microsoft.com/v1.0/me",
        MeetingEndpoint: "https://graph.microsoft.com/v1.0/me/onlineMeetings",

    };

    // create a request object for login or token request calls
    // In scenarios with incremental consent, the request object can be further customized
    var requestObj = {
        scopes: ["user.read"]
    };
    var myMSALObj = new Msal.UserAgentApplication(msalConfig);


    // Register Callbacks for redirect flow
    // myMSALObj.handleRedirectCallbacks(acquireTokenRedirectCallBack, acquireTokenErrorRedirectCallBack);
    myMSALObj.handleRedirectCallback(authRedirectCallBack);
    $(document).ready(function () {
        $('#SignIn').click(function (e) {
            e.preventDefault();
            signIn();
        });
        $('#signout').click(function (e) {
            e.preventDefault();
            myMSALObj.logout();
            $('#teamsUserContainer').hide();
            $('#SignIn').show();
        });






    });

    function signIn() {
        myMSALObj.loginPopup(requestObj).then(function (loginResponse) {

            //  $('#hftoken').val(loginResponse.idToken.rawIdToken);
            //Successful login
            showWelcomeMessage();
            //Call MS Graph using the token in the response
            acquireTokenPopupAndCallMSGraph();
        }).catch(function (error) {
            //Please check the console for errors
            console.log(error);
        });
    }

    function acquireTokenPopupAndCallMSGraph() {
        //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
        myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
            callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
        }).catch(function (error) {
            console.log(error);
            // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
            // Call acquireTokenPopup(popup window)
            if (requiresInteraction(error.errorCode)) {
                myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {
                    callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
                }).catch(function (error) {
                    console.log(error);
                });
            }
        });
    }

    function callMSGraph(theUrl, accessToken, callback) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200)

                callback(JSON.parse(this.responseText));
        }
        localStorage.setItem('myhdntoken', accessToken);
        xmlHttp.open("GET", theUrl, true); // true for asynchronous
        xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
        xmlHttp.send();
    }

    function callMSGraphMeeting(theUrl, accessToken, callback) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200)
                callback(JSON.parse(this.responseText));
        }
        xmlHttp.open("POST", theUrl, true); // true for asynchronous
        xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
        xmlHttp.send();
    }

    function graphAPICallback(data) {
    }

    function showWelcomeMessage() {
        var divWelcome = document.getElementById('welcomeMessage');
        divWelcome.innerHTML = "Welcome " + myMSALObj.getAccount().userName;
        $('#teamsUserContainer').show();
        $('#SignIn').hide();

    }

    //This function can be removed if you do not need to support IE
    function acquireTokenRedirectAndCallMSGraph() {
        //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
        myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
            callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
        }).catch(function (error) {
            console.log(error);
            // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
            // Call acquireTokenRedirect
            if (requiresInteraction(error.errorCode)) {
                myMSALObj.acquireTokenRedirect(requestObj);
            }
        });
    }

    function authRedirectCallBack(error, response) {
        if (error) {
            console.log(error);
        } else {
            if (response.tokenType === "access_token") {
                callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);
            } else {
                console.log("token type is:" + response.tokenType);
            }
        }
    }

    function requiresInteraction(errorCode) {
        if (!errorCode || !errorCode.length) {
            return false;
        }
        return errorCode === "consent_required" ||
            errorCode === "interaction_required" ||
            errorCode === "login_required";
    }

    // Browser check variables
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var msie11 = ua.indexOf('Trident/');
    var msedge = ua.indexOf('Edge/');
    var isIE = msie > 0 || msie11 > 0;
    var isEdge = msedge > 0;

    //If you support IE, our recommendation is that you sign-in using Redirect APIs
    //If you as a developer are testing using Edge InPrivate mode, please add "isEdge" to the if check

    // can change this to default an experience outside browser use
    var loginType = isIE ? "REDIRECT" : "POPUP";

    // runs on page load, change config to try different login types to see what is best for your application
    if (loginType === 'POPUP') {
        if (myMSALObj.getAccount()) {// avoid duplicate code execution on page load in case of iframe and popup window.
            showWelcomeMessage();
            acquireTokenPopupAndCallMSGraph();
        }
    }
    else if (loginType === 'REDIRECT') {
        document.getElementById("SignIn").onclick = function () {
            myMSALObj.loginRedirect(requestObj);
        };

        if (myMSALObj.getAccount() && !myMSALObj.isCallback(window.location.hash)) {// avoid duplicate code execution on page load in case of iframe and popup window.
            showWelcomeMessage();
            acquireTokenRedirectAndCallMSGraph();
        }
    } else {
        console.error('Please set a valid login type');
    }



    //############################ END MICROSOFT TEAMS INTEGRATION SCRIPTS SECTION #####################//

    //#################### VirtualClassRoom Scripts ######################## \\

    $(function () {
        var table;
        $('.js-example-basic-multiple').select2();
        var lang = '@ViewBag.CurrentLanguage';
        var SchoolClassID = $('#SchoolClassID').val();
        var obj = { SchoolClassID: SchoolClassID };
        $('#SchoolClassID').on("change", function () {
            var SchoolClassID = $('#SchoolClassID').val();
            var obj = { SchoolClassID: SchoolClassID };
            AjaxCall('/VirtualClassRoom/GetSections', JSON.stringify(obj), 'POST').done(function (response) {
                $('#sectionId').html('');
                var options = '';
                options += '<option value="0">الرجاء الأختيار</option>';
                for (var i = 0; i < response.Sections.length; i++) {
                    debugger;
                    options += '<option value="' + response.Sections[i].ID + '">' + response.Sections[i].DescriptionAR + '</option>';
                }
                $('#sectionId').append(options);
                $('#sectionId').removeAttr("disabled")

                $('#SubjectID').html('');
                var options2 = '';
                options2 += '<option value="0">الرجاء الأختيار</option>';
                for (var i = 0; i < response.Subjects.length; i++) {
                    debugger;
                    options2 += '<option value="' + response.Subjects[i].ID + '">' + response.Subjects[i].DescriptionAR + '</option>';
                }
                $('#SubjectID').append(options2);
                $('#SubjectID').removeAttr("disabled")
            }).fail(function (error) {
            });
        });
        function AjaxCall(url, data, type) {
            return $.ajax({
                url: url,
                type: type ? type : 'GET',
                data: data,
                contentType: 'application/json'
            });
        }
        $("#btnFilterRec").on("click", function () {
            var DataObj = JSON.stringify({
                'ClassID': $("#SchoolClassID").val(),
                'SectionID': $("#sectionId").val(),

            });
            $.ajax({
                type: "GET",
                url: "@Url.Action("Getrecipient")",
                data: { ClassID: $("#SchoolClassID").val(), SectionID: $("#sectionId").val()},
                //data: { ClassID: 97, SectionID: 137},
                dataType: "html",
                success: function (response) {
                    if (response != null) {
                        $("#Listrecipient").html(response);
                        BindCheckbox();
                        BindDataTable(lang);
                    }
                }

            })

        });
        $("#CreateMeeting").on("click", function () {
            ValidateMeeting();
            CreateTeamsMeeting();
        });
        function CreateTeamsMeeting() {
            var recipientArray = $(".js-example-basic-multiple").val();
            var attende;
            var virtualclassroom;
            var attendes = [];
            var i;
            for (i = 0; i < recipientArray.length; i++) {
         
                attende = {
                    ID: recipientArray[i],
                    GroupID: 2
                };
                attendes.push(attende);
            }
            virtualclassroom = {
                hfAccessToken: localStorage.getItem('myhdntoken'),
                MeetingTitle: $( "#SubjectID option:selected" ).text()
            };
            var smschecked = false;
            if ($("#SendSmsChk").is(":checked")) {
                smschecked = true;
            } else {
                smschecked = false;
            }

            var obj = { Attendees: attendes, virtualMeeting: virtualclassroom, smschecked: smschecked };
            debugger;
            AjaxCall('/VirtualClassRoom/CreateTeamsMeeting', JSON.stringify(obj), 'POST').done(function (response) {

                if (!response.ErrorMsg.trim()) {
                    $("#CreateMeeting").css("display", "none");
                    $("#StartMeeting").css("display", "flex");
                    $("#StartMeeting").attr("href", response.JoinURL);
                }

            }).fail(function (error) {
            });



        }

    });
    function BindDataTable(lang) {

        if (lang == "Arabic") {
            table = $('#exportTable').DataTable({
                destroy: true,
                lengthChange: true,
                paging: false,
                fixedHeader: true,
                responsive: true,
                'lengthMenu': [[10, 25, 50, -1], [10, 25, 50, "All"]],
                "language": {
                    "sEmptyTable": "ليست هناك بيانات متاحة في الجدول",
                    "sLoadingRecords": "جارٍ التحميل...",
                    "sProcessing": "جارٍ التحميل...",
                    "sLengthMenu": "_MENU_ مدخلات",
                    "sZeroRecords": "لم يعثر على أية سجلات",
                    "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
                    "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
                    "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
                    "sInfoPostFix": "",
                    "sSearch": "ابحث:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "الأول",
                        "sPrevious": "السابق",
                        "sNext": "التالي",
                        "sLast": "الأخير"
                    },
                    "oAria": {
                        "sSortAscending": ": تفعيل لترتيب العمود تصاعدياً",
                        "sSortDescending": ": تفعيل لترتيب العمود تنازلياً"
                    }
                }
            });
            table.buttons().container().appendTo('#example_wrapper .col-md-6:eq(0)');

        }
        else {
            table = $('#exportTable').DataTable({
                destroy: true,
                lengthChange: true,
                fixedHeader: true,
                responsive: true
            });
            table.buttons().container().appendTo('#example_wrapper .col-md-6:eq(0)');



        }

    }

    function BindCheckbox() {
        // Header Master Checkbox Event
        $("#masterCheck").on("click", function () {
            if ($('input:checkbox[name="mastercheckbox"]').prop("checked")) {
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input:checkbox[name="row-check"]', rows).prop('checked', true);

            } else {

                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input:checkbox[name="row-check"]', rows).prop('checked', false);
            }
        });

        // Check event on each table row checkbox
        $("input:checkbox[name='row-check']").on("change", function () {
            var total_check_boxes = $("input:checkbox[name='row-check']").length;
            var total_checked_boxes = $("input:checkbox[name='row-check']:checked").length;
            console.log("total_checked_boxes::" + total_checked_boxes);
            // If all checked manually then check master checkbox
            if (total_check_boxes === total_checked_boxes) {
                $("#masterCheck").prop("checked", true);
            }
            else {
                $("#masterCheck").prop("checked", false);
            }
        });
    }

    function SetRecipient() {
        //get all checked values
        var recipient;
        var recipientArray = $(".js-example-basic-multiple").val();
        var rows = table.rows({ 'search': 'applied' }).nodes();
        var inputs = $("input:checkbox[name='row-check']:checked",rows);
        inputs.each(function (i, v) {
            if (!recipientArray.includes(v.id)) {
                recipient = {
                    id: v.id,
                    text: v.value
                };
                var newOption = new Option(recipient.text, recipient.id, false, true);
                $('.js-example-basic-multiple').append(newOption).trigger('change');
            }

        });

        $("#CloseModal").click();
    }

</script>
