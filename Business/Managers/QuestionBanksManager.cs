//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class QuestionBanksManager : BusinessComponentBase, IQuestionBanksManager
{


    public QuestionBanksManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(QuestionBank QuestionBank)
    {

DataAccessFactory.GetQuestionBanksRepository.Add(QuestionBank);
            DataAccessFactory.Commit();

}

public void Update(QuestionBank QuestionBank)
    {

DataAccessFactory.GetQuestionBanksRepository.Update(QuestionBank);
        DataAccessFactory.Commit();

}

public void Delete(QuestionBank QuestionBank)
    {

DataAccessFactory.GetQuestionBanksRepository.Delete(QuestionBank);
            DataAccessFactory.Commit();

}

public QuestionBank GetById(short id)
    {
        QuestionBank QuestionBank = null;

        //  QuestionBank =  DataAccessFactory.GetQuestionBanksRepository.First(_QuestionBank => _QuestionBank.QuestionBankID == id);

        return QuestionBank;
    }

    public IList<QuestionBank> GetAll()
    {
        IEnumerable<QuestionBank> QuestionBanks = null;

        QuestionBanks = DataAccessFactory.GetQuestionBanksRepository.GetAll();

        IList<QuestionBank> result = QuestionBanks.ToList<QuestionBank>();

        return result;
    }
		
    public IEnumerable<QuestionBank> Find(Expression<Func<QuestionBank, bool>> @where, params Expression<Func<QuestionBank, object>>[] includes)
    {
        return  DataAccessFactory.GetQuestionBanksRepository.Find(@where, includes);
    }
		



        		

}

}
