//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AccountTypesManager : BusinessComponentBase, IAccountTypesManager
{


    public AccountTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AccountType AccountType)
    {

DataAccessFactory.GetAccountTypesRepository.Add(AccountType);
            DataAccessFactory.Commit();

}

public void Update(AccountType AccountType)
    {

DataAccessFactory.GetAccountTypesRepository.Update(AccountType);
        DataAccessFactory.Commit();

}

public void Delete(AccountType AccountType)
    {

DataAccessFactory.GetAccountTypesRepository.Delete(AccountType);
            DataAccessFactory.Commit();

}

public AccountType GetById(short id)
    {
        AccountType AccountType = null;

        //  AccountType =  DataAccessFactory.GetAccountTypesRepository.First(_AccountType => _AccountType.AccountTypeID == id);

        return AccountType;
    }

    public IList<AccountType> GetAll()
    {
        IEnumerable<AccountType> AccountTypes = null;

        AccountTypes = DataAccessFactory.GetAccountTypesRepository.GetAll();

        IList<AccountType> result = AccountTypes.ToList<AccountType>();

        return result;
    }
		
    public IEnumerable<AccountType> Find(Expression<Func<AccountType, bool>> @where, params Expression<Func<AccountType, object>>[] includes)
    {
        return  DataAccessFactory.GetAccountTypesRepository.Find(@where, includes);
    }
		



        		

}

}
