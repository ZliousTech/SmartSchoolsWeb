//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BloodTypesManager : BusinessComponentBase, IBloodTypesManager
{


    public BloodTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BloodType BloodType)
    {

DataAccessFactory.GetBloodTypesRepository.Add(BloodType);
            DataAccessFactory.Commit();

}

public void Update(BloodType BloodType)
    {

DataAccessFactory.GetBloodTypesRepository.Update(BloodType);
        DataAccessFactory.Commit();

}

public void Delete(BloodType BloodType)
    {

DataAccessFactory.GetBloodTypesRepository.Delete(BloodType);
            DataAccessFactory.Commit();

}

public BloodType GetById(short id)
    {
        BloodType BloodType = null;

        //  BloodType =  DataAccessFactory.GetBloodTypesRepository.First(_BloodType => _BloodType.BloodTypeID == id);

        return BloodType;
    }

    public IList<BloodType> GetAll()
    {
        IEnumerable<BloodType> BloodTypes = null;

        BloodTypes = DataAccessFactory.GetBloodTypesRepository.GetAll();

        IList<BloodType> result = BloodTypes.ToList<BloodType>();

        return result;
    }
		
    public IEnumerable<BloodType> Find(Expression<Func<BloodType, bool>> @where, params Expression<Func<BloodType, object>>[] includes)
    {
        return  DataAccessFactory.GetBloodTypesRepository.Find(@where, includes);
    }
		



        		

}

}
