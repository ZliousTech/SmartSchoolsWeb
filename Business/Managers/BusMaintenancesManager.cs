//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BusMaintenancesManager : BusinessComponentBase, IBusMaintenancesManager
{


    public BusMaintenancesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BusMaintenance BusMaintenance)
    {

DataAccessFactory.GetBusMaintenancesRepository.Add(BusMaintenance);
            DataAccessFactory.Commit();

}

public void Update(BusMaintenance BusMaintenance)
    {

DataAccessFactory.GetBusMaintenancesRepository.Update(BusMaintenance);
        DataAccessFactory.Commit();

}

public void Delete(BusMaintenance BusMaintenance)
    {

DataAccessFactory.GetBusMaintenancesRepository.Delete(BusMaintenance);
            DataAccessFactory.Commit();

}

public BusMaintenance GetById(short id)
    {
        BusMaintenance BusMaintenance = null;

        //  BusMaintenance =  DataAccessFactory.GetBusMaintenancesRepository.First(_BusMaintenance => _BusMaintenance.BusMaintenanceID == id);

        return BusMaintenance;
    }

    public IList<BusMaintenance> GetAll()
    {
        IEnumerable<BusMaintenance> BusMaintenances = null;

        BusMaintenances = DataAccessFactory.GetBusMaintenancesRepository.GetAll();

        IList<BusMaintenance> result = BusMaintenances.ToList<BusMaintenance>();

        return result;
    }
		
    public IEnumerable<BusMaintenance> Find(Expression<Func<BusMaintenance, bool>> @where, params Expression<Func<BusMaintenance, object>>[] includes)
    {
        return  DataAccessFactory.GetBusMaintenancesRepository.Find(@where, includes);
    }
		



        		

}

}
