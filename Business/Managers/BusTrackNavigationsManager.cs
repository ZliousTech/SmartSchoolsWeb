//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BusTrackNavigationsManager : BusinessComponentBase, IBusTrackNavigationsManager
{


    public BusTrackNavigationsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BusTrackNavigation BusTrackNavigation)
    {

DataAccessFactory.GetBusTrackNavigationsRepository.Add(BusTrackNavigation);
            DataAccessFactory.Commit();

}

public void Update(BusTrackNavigation BusTrackNavigation)
    {

DataAccessFactory.GetBusTrackNavigationsRepository.Update(BusTrackNavigation);
        DataAccessFactory.Commit();

}

public void Delete(BusTrackNavigation BusTrackNavigation)
    {

DataAccessFactory.GetBusTrackNavigationsRepository.Delete(BusTrackNavigation);
            DataAccessFactory.Commit();

}

public BusTrackNavigation GetById(short id)
    {
        BusTrackNavigation BusTrackNavigation = null;

        //  BusTrackNavigation =  DataAccessFactory.GetBusTrackNavigationsRepository.First(_BusTrackNavigation => _BusTrackNavigation.BusTrackNavigationID == id);

        return BusTrackNavigation;
    }

    public IList<BusTrackNavigation> GetAll()
    {
        IEnumerable<BusTrackNavigation> BusTrackNavigations = null;

        BusTrackNavigations = DataAccessFactory.GetBusTrackNavigationsRepository.GetAll();

        IList<BusTrackNavigation> result = BusTrackNavigations.ToList<BusTrackNavigation>();

        return result;
    }
		
    public IEnumerable<BusTrackNavigation> Find(Expression<Func<BusTrackNavigation, bool>> @where, params Expression<Func<BusTrackNavigation, object>>[] includes)
    {
        return  DataAccessFactory.GetBusTrackNavigationsRepository.Find(@where, includes);
    }
		



        		

}

}
