//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AccountsDetailsManager : BusinessComponentBase, IAccountsDetailsManager
{


    public AccountsDetailsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AccountsDetail AccountsDetail)
    {

DataAccessFactory.GetAccountsDetailsRepository.Add(AccountsDetail);
            DataAccessFactory.Commit();

}

public void Update(AccountsDetail AccountsDetail)
    {

DataAccessFactory.GetAccountsDetailsRepository.Update(AccountsDetail);
        DataAccessFactory.Commit();

}

public void Delete(AccountsDetail AccountsDetail)
    {

DataAccessFactory.GetAccountsDetailsRepository.Delete(AccountsDetail);
            DataAccessFactory.Commit();

}

public AccountsDetail GetById(short id)
    {
        AccountsDetail AccountsDetail = null;

        //  AccountsDetail =  DataAccessFactory.GetAccountsDetailsRepository.First(_AccountsDetail => _AccountsDetail.AccountsDetailID == id);

        return AccountsDetail;
    }

    public IList<AccountsDetail> GetAll()
    {
        IEnumerable<AccountsDetail> AccountsDetails = null;

        AccountsDetails = DataAccessFactory.GetAccountsDetailsRepository.GetAll();

        IList<AccountsDetail> result = AccountsDetails.ToList<AccountsDetail>();

        return result;
    }
		
    public IEnumerable<AccountsDetail> Find(Expression<Func<AccountsDetail, bool>> @where, params Expression<Func<AccountsDetail, object>>[] includes)
    {
        return  DataAccessFactory.GetAccountsDetailsRepository.Find(@where, includes);
    }
		



        		

}

}
