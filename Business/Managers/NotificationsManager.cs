//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class NotificationsManager : BusinessComponentBase, INotificationsManager
{


    public NotificationsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(Notification Notification)
    {

DataAccessFactory.GetNotificationsRepository.Add(Notification);
            DataAccessFactory.Commit();

}

public void Update(Notification Notification)
    {

DataAccessFactory.GetNotificationsRepository.Update(Notification);
        DataAccessFactory.Commit();

}

public void Delete(Notification Notification)
    {

DataAccessFactory.GetNotificationsRepository.Delete(Notification);
            DataAccessFactory.Commit();

}

public Notification GetById(short id)
    {
        Notification Notification = null;

        //  Notification =  DataAccessFactory.GetNotificationsRepository.First(_Notification => _Notification.NotificationID == id);

        return Notification;
    }

    public IList<Notification> GetAll()
    {
        IEnumerable<Notification> Notifications = null;

        Notifications = DataAccessFactory.GetNotificationsRepository.GetAll();

        IList<Notification> result = Notifications.ToList<Notification>();

        return result;
    }
		
    public IEnumerable<Notification> Find(Expression<Func<Notification, bool>> @where, params Expression<Func<Notification, object>>[] includes)
    {
        return  DataAccessFactory.GetNotificationsRepository.Find(@where, includes);
    }
		



        		

}

}
