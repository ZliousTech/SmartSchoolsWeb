//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BankBranchsManager : BusinessComponentBase, IBankBranchsManager
{


    public BankBranchsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BankBranch BankBranch)
    {

DataAccessFactory.GetBankBranchsRepository.Add(BankBranch);
            DataAccessFactory.Commit();

}

public void Update(BankBranch BankBranch)
    {

DataAccessFactory.GetBankBranchsRepository.Update(BankBranch);
        DataAccessFactory.Commit();

}

public void Delete(BankBranch BankBranch)
    {

DataAccessFactory.GetBankBranchsRepository.Delete(BankBranch);
            DataAccessFactory.Commit();

}

public BankBranch GetById(short id)
    {
        BankBranch BankBranch = null;

        //  BankBranch =  DataAccessFactory.GetBankBranchsRepository.First(_BankBranch => _BankBranch.BankBranchID == id);

        return BankBranch;
    }

    public IList<BankBranch> GetAll()
    {
        IEnumerable<BankBranch> BankBranchs = null;

        BankBranchs = DataAccessFactory.GetBankBranchsRepository.GetAll();

        IList<BankBranch> result = BankBranchs.ToList<BankBranch>();

        return result;
    }
		
    public IEnumerable<BankBranch> Find(Expression<Func<BankBranch, bool>> @where, params Expression<Func<BankBranch, object>>[] includes)
    {
        return  DataAccessFactory.GetBankBranchsRepository.Find(@where, includes);
    }
		



        		

}

}
