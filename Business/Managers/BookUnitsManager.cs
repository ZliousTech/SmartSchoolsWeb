//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BookUnitsManager : BusinessComponentBase, IBookUnitsManager
{


    public BookUnitsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BookUnit BookUnit)
    {

DataAccessFactory.GetBookUnitsRepository.Add(BookUnit);
            DataAccessFactory.Commit();

}

public void Update(BookUnit BookUnit)
    {

DataAccessFactory.GetBookUnitsRepository.Update(BookUnit);
        DataAccessFactory.Commit();

}

public void Delete(BookUnit BookUnit)
    {

DataAccessFactory.GetBookUnitsRepository.Delete(BookUnit);
            DataAccessFactory.Commit();

}

public BookUnit GetById(short id)
    {
        BookUnit BookUnit = null;

        //  BookUnit =  DataAccessFactory.GetBookUnitsRepository.First(_BookUnit => _BookUnit.BookUnitID == id);

        return BookUnit;
    }

    public IList<BookUnit> GetAll()
    {
        IEnumerable<BookUnit> BookUnits = null;

        BookUnits = DataAccessFactory.GetBookUnitsRepository.GetAll();

        IList<BookUnit> result = BookUnits.ToList<BookUnit>();

        return result;
    }
		
    public IEnumerable<BookUnit> Find(Expression<Func<BookUnit, bool>> @where, params Expression<Func<BookUnit, object>>[] includes)
    {
        return  DataAccessFactory.GetBookUnitsRepository.Find(@where, includes);
    }
		



        		

}

}
