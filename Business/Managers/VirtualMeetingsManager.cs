//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class VirtualMeetingsManager : BusinessComponentBase, IVirtualMeetingsManager
{


    public VirtualMeetingsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(VirtualMeeting VirtualMeeting)
    {

DataAccessFactory.GetVirtualMeetingsRepository.Add(VirtualMeeting);
            DataAccessFactory.Commit();

}

public void Update(VirtualMeeting VirtualMeeting)
    {

DataAccessFactory.GetVirtualMeetingsRepository.Update(VirtualMeeting);
        DataAccessFactory.Commit();

}

public void Delete(VirtualMeeting VirtualMeeting)
    {

DataAccessFactory.GetVirtualMeetingsRepository.Delete(VirtualMeeting);
            DataAccessFactory.Commit();

}

public VirtualMeeting GetById(short id)
    {
        VirtualMeeting VirtualMeeting = null;

        //  VirtualMeeting =  DataAccessFactory.GetVirtualMeetingsRepository.First(_VirtualMeeting => _VirtualMeeting.VirtualMeetingID == id);

        return VirtualMeeting;
    }

    public IList<VirtualMeeting> GetAll()
    {
        IEnumerable<VirtualMeeting> VirtualMeetings = null;

        VirtualMeetings = DataAccessFactory.GetVirtualMeetingsRepository.GetAll();

        IList<VirtualMeeting> result = VirtualMeetings.ToList<VirtualMeeting>();

        return result;
    }
		
    public IEnumerable<VirtualMeeting> Find(Expression<Func<VirtualMeeting, bool>> @where, params Expression<Func<VirtualMeeting, object>>[] includes)
    {
        return  DataAccessFactory.GetVirtualMeetingsRepository.Find(@where, includes);
    }
		



        		

}

}

