//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class PrivilagesManager : BusinessComponentBase, IPrivilagesManager
{


    public PrivilagesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(Privilage Privilage)
    {

DataAccessFactory.GetPrivilagesRepository.Add(Privilage);
            DataAccessFactory.Commit();

}

public void Update(Privilage Privilage)
    {

DataAccessFactory.GetPrivilagesRepository.Update(Privilage);
        DataAccessFactory.Commit();

}

public void Delete(Privilage Privilage)
    {

DataAccessFactory.GetPrivilagesRepository.Delete(Privilage);
            DataAccessFactory.Commit();

}

public Privilage GetById(short id)
    {
        Privilage Privilage = null;

        //  Privilage =  DataAccessFactory.GetPrivilagesRepository.First(_Privilage => _Privilage.PrivilageID == id);

        return Privilage;
    }

    public IList<Privilage> GetAll()
    {
        IEnumerable<Privilage> Privilages = null;

        Privilages = DataAccessFactory.GetPrivilagesRepository.GetAll();

        IList<Privilage> result = Privilages.ToList<Privilage>();

        return result;
    }
		
    public IEnumerable<Privilage> Find(Expression<Func<Privilage, bool>> @where, params Expression<Func<Privilage, object>>[] includes)
    {
        return  DataAccessFactory.GetPrivilagesRepository.Find(@where, includes);
    }
		



        		

}

}
