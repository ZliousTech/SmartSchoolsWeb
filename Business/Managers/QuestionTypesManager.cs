//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class QuestionTypesManager : BusinessComponentBase, IQuestionTypesManager
{


    public QuestionTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(QuestionType QuestionType)
    {

DataAccessFactory.GetQuestionTypesRepository.Add(QuestionType);
            DataAccessFactory.Commit();

}

public void Update(QuestionType QuestionType)
    {

DataAccessFactory.GetQuestionTypesRepository.Update(QuestionType);
        DataAccessFactory.Commit();

}

public void Delete(QuestionType QuestionType)
    {

DataAccessFactory.GetQuestionTypesRepository.Delete(QuestionType);
            DataAccessFactory.Commit();

}

public QuestionType GetById(short id)
    {
        QuestionType QuestionType = null;

        //  QuestionType =  DataAccessFactory.GetQuestionTypesRepository.First(_QuestionType => _QuestionType.QuestionTypeID == id);

        return QuestionType;
    }

    public IList<QuestionType> GetAll()
    {
        IEnumerable<QuestionType> QuestionTypes = null;

        QuestionTypes = DataAccessFactory.GetQuestionTypesRepository.GetAll();

        IList<QuestionType> result = QuestionTypes.ToList<QuestionType>();

        return result;
    }
		
    public IEnumerable<QuestionType> Find(Expression<Func<QuestionType, bool>> @where, params Expression<Func<QuestionType, object>>[] includes)
    {
        return  DataAccessFactory.GetQuestionTypesRepository.Find(@where, includes);
    }
		



        		

}

}
