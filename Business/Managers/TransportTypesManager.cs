//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TransportTypesManager : BusinessComponentBase, ITransportTypesManager
{


    public TransportTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TransportType TransportType)
    {

DataAccessFactory.GetTransportTypesRepository.Add(TransportType);
            DataAccessFactory.Commit();

}

public void Update(TransportType TransportType)
    {

DataAccessFactory.GetTransportTypesRepository.Update(TransportType);
        DataAccessFactory.Commit();

}

public void Delete(TransportType TransportType)
    {

DataAccessFactory.GetTransportTypesRepository.Delete(TransportType);
            DataAccessFactory.Commit();

}

public TransportType GetById(short id)
    {
        TransportType TransportType = null;

        //  TransportType =  DataAccessFactory.GetTransportTypesRepository.First(_TransportType => _TransportType.TransportTypeID == id);

        return TransportType;
    }

    public IList<TransportType> GetAll()
    {
        IEnumerable<TransportType> TransportTypes = null;

        TransportTypes = DataAccessFactory.GetTransportTypesRepository.GetAll();

        IList<TransportType> result = TransportTypes.ToList<TransportType>();

        return result;
    }
		
    public IEnumerable<TransportType> Find(Expression<Func<TransportType, bool>> @where, params Expression<Func<TransportType, object>>[] includes)
    {
        return  DataAccessFactory.GetTransportTypesRepository.Find(@where, includes);
    }
		



        		

}

}

