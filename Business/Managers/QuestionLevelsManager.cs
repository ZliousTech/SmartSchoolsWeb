//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class QuestionLevelsManager : BusinessComponentBase, IQuestionLevelsManager
{


    public QuestionLevelsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(QuestionLevel QuestionLevel)
    {

DataAccessFactory.GetQuestionLevelsRepository.Add(QuestionLevel);
            DataAccessFactory.Commit();

}

public void Update(QuestionLevel QuestionLevel)
    {

DataAccessFactory.GetQuestionLevelsRepository.Update(QuestionLevel);
        DataAccessFactory.Commit();

}

public void Delete(QuestionLevel QuestionLevel)
    {

DataAccessFactory.GetQuestionLevelsRepository.Delete(QuestionLevel);
            DataAccessFactory.Commit();

}

public QuestionLevel GetById(short id)
    {
        QuestionLevel QuestionLevel = null;

        //  QuestionLevel =  DataAccessFactory.GetQuestionLevelsRepository.First(_QuestionLevel => _QuestionLevel.QuestionLevelID == id);

        return QuestionLevel;
    }

    public IList<QuestionLevel> GetAll()
    {
        IEnumerable<QuestionLevel> QuestionLevels = null;

        QuestionLevels = DataAccessFactory.GetQuestionLevelsRepository.GetAll();

        IList<QuestionLevel> result = QuestionLevels.ToList<QuestionLevel>();

        return result;
    }
		
    public IEnumerable<QuestionLevel> Find(Expression<Func<QuestionLevel, bool>> @where, params Expression<Func<QuestionLevel, object>>[] includes)
    {
        return  DataAccessFactory.GetQuestionLevelsRepository.Find(@where, includes);
    }
		



        		

}

}
