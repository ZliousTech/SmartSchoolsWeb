//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AspNetRolesManager : BusinessComponentBase, IAspNetRolesManager
{


    public AspNetRolesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AspNetRole AspNetRole)
    {

DataAccessFactory.GetAspNetRolesRepository.Add(AspNetRole);
            DataAccessFactory.Commit();

}

public void Update(AspNetRole AspNetRole)
    {

DataAccessFactory.GetAspNetRolesRepository.Update(AspNetRole);
        DataAccessFactory.Commit();

}

public void Delete(AspNetRole AspNetRole)
    {

DataAccessFactory.GetAspNetRolesRepository.Delete(AspNetRole);
            DataAccessFactory.Commit();

}

public AspNetRole GetById(short id)
    {
        AspNetRole AspNetRole = null;

        //  AspNetRole =  DataAccessFactory.GetAspNetRolesRepository.First(_AspNetRole => _AspNetRole.AspNetRoleID == id);

        return AspNetRole;
    }

    public IList<AspNetRole> GetAll()
    {
        IEnumerable<AspNetRole> AspNetRoles = null;

        AspNetRoles = DataAccessFactory.GetAspNetRolesRepository.GetAll();

        IList<AspNetRole> result = AspNetRoles.ToList<AspNetRole>();

        return result;
    }
		
    public IEnumerable<AspNetRole> Find(Expression<Func<AspNetRole, bool>> @where, params Expression<Func<AspNetRole, object>>[] includes)
    {
        return  DataAccessFactory.GetAspNetRolesRepository.Find(@where, includes);
    }
		



        		

}

}
