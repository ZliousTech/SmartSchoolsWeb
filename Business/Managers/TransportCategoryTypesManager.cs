//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TransportCategoryTypesManager : BusinessComponentBase, ITransportCategoryTypesManager
{


    public TransportCategoryTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TransportCategoryType TransportCategoryType)
    {

DataAccessFactory.GetTransportCategoryTypesRepository.Add(TransportCategoryType);
            DataAccessFactory.Commit();

}

public void Update(TransportCategoryType TransportCategoryType)
    {

DataAccessFactory.GetTransportCategoryTypesRepository.Update(TransportCategoryType);
        DataAccessFactory.Commit();

}

public void Delete(TransportCategoryType TransportCategoryType)
    {

DataAccessFactory.GetTransportCategoryTypesRepository.Delete(TransportCategoryType);
            DataAccessFactory.Commit();

}

public TransportCategoryType GetById(short id)
    {
        TransportCategoryType TransportCategoryType = null;

        //  TransportCategoryType =  DataAccessFactory.GetTransportCategoryTypesRepository.First(_TransportCategoryType => _TransportCategoryType.TransportCategoryTypeID == id);

        return TransportCategoryType;
    }

    public IList<TransportCategoryType> GetAll()
    {
        IEnumerable<TransportCategoryType> TransportCategoryTypes = null;

        TransportCategoryTypes = DataAccessFactory.GetTransportCategoryTypesRepository.GetAll();

        IList<TransportCategoryType> result = TransportCategoryTypes.ToList<TransportCategoryType>();

        return result;
    }
		
    public IEnumerable<TransportCategoryType> Find(Expression<Func<TransportCategoryType, bool>> @where, params Expression<Func<TransportCategoryType, object>>[] includes)
    {
        return  DataAccessFactory.GetTransportCategoryTypesRepository.Find(@where, includes);
    }
		



        		

}

}
