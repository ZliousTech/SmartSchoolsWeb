//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class DocumentTypesManager : BusinessComponentBase, IDocumentTypesManager
{


    public DocumentTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(DocumentType DocumentType)
    {

DataAccessFactory.GetDocumentTypesRepository.Add(DocumentType);
            DataAccessFactory.Commit();

}

public void Update(DocumentType DocumentType)
    {

DataAccessFactory.GetDocumentTypesRepository.Update(DocumentType);
        DataAccessFactory.Commit();

}

public void Delete(DocumentType DocumentType)
    {

DataAccessFactory.GetDocumentTypesRepository.Delete(DocumentType);
            DataAccessFactory.Commit();

}

public DocumentType GetById(short id)
    {
        DocumentType DocumentType = null;

        //  DocumentType =  DataAccessFactory.GetDocumentTypesRepository.First(_DocumentType => _DocumentType.DocumentTypeID == id);

        return DocumentType;
    }

    public IList<DocumentType> GetAll()
    {
        IEnumerable<DocumentType> DocumentTypes = null;

        DocumentTypes = DataAccessFactory.GetDocumentTypesRepository.GetAll();

        IList<DocumentType> result = DocumentTypes.ToList<DocumentType>();

        return result;
    }
		
    public IEnumerable<DocumentType> Find(Expression<Func<DocumentType, bool>> @where, params Expression<Func<DocumentType, object>>[] includes)
    {
        return  DataAccessFactory.GetDocumentTypesRepository.Find(@where, includes);
    }
		



        		

}

}
