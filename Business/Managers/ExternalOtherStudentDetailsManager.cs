//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class ExternalOtherStudentDetailsManager : BusinessComponentBase, IExternalOtherStudentDetailsManager
{


    public ExternalOtherStudentDetailsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(ExternalOtherStudentDetail ExternalOtherStudentDetail)
    {

DataAccessFactory.GetExternalOtherStudentDetailsRepository.Add(ExternalOtherStudentDetail);
            DataAccessFactory.Commit();

}

public void Update(ExternalOtherStudentDetail ExternalOtherStudentDetail)
    {

DataAccessFactory.GetExternalOtherStudentDetailsRepository.Update(ExternalOtherStudentDetail);
        DataAccessFactory.Commit();

}

public void Delete(ExternalOtherStudentDetail ExternalOtherStudentDetail)
    {

DataAccessFactory.GetExternalOtherStudentDetailsRepository.Delete(ExternalOtherStudentDetail);
            DataAccessFactory.Commit();

}

public ExternalOtherStudentDetail GetById(short id)
    {
        ExternalOtherStudentDetail ExternalOtherStudentDetail = null;

        //  ExternalOtherStudentDetail =  DataAccessFactory.GetExternalOtherStudentDetailsRepository.First(_ExternalOtherStudentDetail => _ExternalOtherStudentDetail.ExternalOtherStudentDetailID == id);

        return ExternalOtherStudentDetail;
    }

    public IList<ExternalOtherStudentDetail> GetAll()
    {
        IEnumerable<ExternalOtherStudentDetail> ExternalOtherStudentDetails = null;

        ExternalOtherStudentDetails = DataAccessFactory.GetExternalOtherStudentDetailsRepository.GetAll();

        IList<ExternalOtherStudentDetail> result = ExternalOtherStudentDetails.ToList<ExternalOtherStudentDetail>();

        return result;
    }
		
    public IEnumerable<ExternalOtherStudentDetail> Find(Expression<Func<ExternalOtherStudentDetail, bool>> @where, params Expression<Func<ExternalOtherStudentDetail, object>>[] includes)
    {
        return  DataAccessFactory.GetExternalOtherStudentDetailsRepository.Find(@where, includes);
    }
		



        		

}

}
