//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class CreditCardTypesManager : BusinessComponentBase, ICreditCardTypesManager
{


    public CreditCardTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(CreditCardType CreditCardType)
    {

DataAccessFactory.GetCreditCardTypesRepository.Add(CreditCardType);
            DataAccessFactory.Commit();

}

public void Update(CreditCardType CreditCardType)
    {

DataAccessFactory.GetCreditCardTypesRepository.Update(CreditCardType);
        DataAccessFactory.Commit();

}

public void Delete(CreditCardType CreditCardType)
    {

DataAccessFactory.GetCreditCardTypesRepository.Delete(CreditCardType);
            DataAccessFactory.Commit();

}

public CreditCardType GetById(short id)
    {
        CreditCardType CreditCardType = null;

        //  CreditCardType =  DataAccessFactory.GetCreditCardTypesRepository.First(_CreditCardType => _CreditCardType.CreditCardTypeID == id);

        return CreditCardType;
    }

    public IList<CreditCardType> GetAll()
    {
        IEnumerable<CreditCardType> CreditCardTypes = null;

        CreditCardTypes = DataAccessFactory.GetCreditCardTypesRepository.GetAll();

        IList<CreditCardType> result = CreditCardTypes.ToList<CreditCardType>();

        return result;
    }
		
    public IEnumerable<CreditCardType> Find(Expression<Func<CreditCardType, bool>> @where, params Expression<Func<CreditCardType, object>>[] includes)
    {
        return  DataAccessFactory.GetCreditCardTypesRepository.Find(@where, includes);
    }
		



        		

}

}
