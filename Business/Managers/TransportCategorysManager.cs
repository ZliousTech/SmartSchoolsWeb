//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TransportCategorysManager : BusinessComponentBase, ITransportCategorysManager
{


    public TransportCategorysManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TransportCategory TransportCategory)
    {

DataAccessFactory.GetTransportCategorysRepository.Add(TransportCategory);
            DataAccessFactory.Commit();

}

public void Update(TransportCategory TransportCategory)
    {

DataAccessFactory.GetTransportCategorysRepository.Update(TransportCategory);
        DataAccessFactory.Commit();

}

public void Delete(TransportCategory TransportCategory)
    {

DataAccessFactory.GetTransportCategorysRepository.Delete(TransportCategory);
            DataAccessFactory.Commit();

}

public TransportCategory GetById(short id)
    {
        TransportCategory TransportCategory = null;

        //  TransportCategory =  DataAccessFactory.GetTransportCategorysRepository.First(_TransportCategory => _TransportCategory.TransportCategoryID == id);

        return TransportCategory;
    }

    public IList<TransportCategory> GetAll()
    {
        IEnumerable<TransportCategory> TransportCategorys = null;

        TransportCategorys = DataAccessFactory.GetTransportCategorysRepository.GetAll();

        IList<TransportCategory> result = TransportCategorys.ToList<TransportCategory>();

        return result;
    }
		
    public IEnumerable<TransportCategory> Find(Expression<Func<TransportCategory, bool>> @where, params Expression<Func<TransportCategory, object>>[] includes)
    {
        return  DataAccessFactory.GetTransportCategorysRepository.Find(@where, includes);
    }
		



        		

}

}
