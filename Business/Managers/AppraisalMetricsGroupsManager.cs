//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AppraisalMetricsGroupsManager : BusinessComponentBase, IAppraisalMetricsGroupsManager
{


    public AppraisalMetricsGroupsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AppraisalMetricsGroup AppraisalMetricsGroup)
    {

DataAccessFactory.GetAppraisalMetricsGroupsRepository.Add(AppraisalMetricsGroup);
            DataAccessFactory.Commit();

}

public void Update(AppraisalMetricsGroup AppraisalMetricsGroup)
    {

DataAccessFactory.GetAppraisalMetricsGroupsRepository.Update(AppraisalMetricsGroup);
        DataAccessFactory.Commit();

}

public void Delete(AppraisalMetricsGroup AppraisalMetricsGroup)
    {

DataAccessFactory.GetAppraisalMetricsGroupsRepository.Delete(AppraisalMetricsGroup);
            DataAccessFactory.Commit();

}

public AppraisalMetricsGroup GetById(short id)
    {
        AppraisalMetricsGroup AppraisalMetricsGroup = null;

        //  AppraisalMetricsGroup =  DataAccessFactory.GetAppraisalMetricsGroupsRepository.First(_AppraisalMetricsGroup => _AppraisalMetricsGroup.AppraisalMetricsGroupID == id);

        return AppraisalMetricsGroup;
    }

    public IList<AppraisalMetricsGroup> GetAll()
    {
        IEnumerable<AppraisalMetricsGroup> AppraisalMetricsGroups = null;

        AppraisalMetricsGroups = DataAccessFactory.GetAppraisalMetricsGroupsRepository.GetAll();

        IList<AppraisalMetricsGroup> result = AppraisalMetricsGroups.ToList<AppraisalMetricsGroup>();

        return result;
    }
		
    public IEnumerable<AppraisalMetricsGroup> Find(Expression<Func<AppraisalMetricsGroup, bool>> @where, params Expression<Func<AppraisalMetricsGroup, object>>[] includes)
    {
        return  DataAccessFactory.GetAppraisalMetricsGroupsRepository.Find(@where, includes);
    }
		



        		

}

}
