//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class CurriculumDepartmentsManager : BusinessComponentBase, ICurriculumDepartmentsManager
{


    public CurriculumDepartmentsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(CurriculumDepartment CurriculumDepartment)
    {

DataAccessFactory.GetCurriculumDepartmentsRepository.Add(CurriculumDepartment);
            DataAccessFactory.Commit();

}

public void Update(CurriculumDepartment CurriculumDepartment)
    {

DataAccessFactory.GetCurriculumDepartmentsRepository.Update(CurriculumDepartment);
        DataAccessFactory.Commit();

}

public void Delete(CurriculumDepartment CurriculumDepartment)
    {

DataAccessFactory.GetCurriculumDepartmentsRepository.Delete(CurriculumDepartment);
            DataAccessFactory.Commit();

}

public CurriculumDepartment GetById(short id)
    {
        CurriculumDepartment CurriculumDepartment = null;

        //  CurriculumDepartment =  DataAccessFactory.GetCurriculumDepartmentsRepository.First(_CurriculumDepartment => _CurriculumDepartment.CurriculumDepartmentID == id);

        return CurriculumDepartment;
    }

    public IList<CurriculumDepartment> GetAll()
    {
        IEnumerable<CurriculumDepartment> CurriculumDepartments = null;

        CurriculumDepartments = DataAccessFactory.GetCurriculumDepartmentsRepository.GetAll();

        IList<CurriculumDepartment> result = CurriculumDepartments.ToList<CurriculumDepartment>();

        return result;
    }
		
    public IEnumerable<CurriculumDepartment> Find(Expression<Func<CurriculumDepartment, bool>> @where, params Expression<Func<CurriculumDepartment, object>>[] includes)
    {
        return  DataAccessFactory.GetCurriculumDepartmentsRepository.Find(@where, includes);
    }
		



        		

}

}
