//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class SchoolBranchsManager : BusinessComponentBase, ISchoolBranchsManager
{


    public SchoolBranchsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(SchoolBranch SchoolBranch)
    {

DataAccessFactory.GetSchoolBranchsRepository.Add(SchoolBranch);
            DataAccessFactory.Commit();

}

public void Update(SchoolBranch SchoolBranch)
    {

DataAccessFactory.GetSchoolBranchsRepository.Update(SchoolBranch);
        DataAccessFactory.Commit();

}

public void Delete(SchoolBranch SchoolBranch)
    {

DataAccessFactory.GetSchoolBranchsRepository.Delete(SchoolBranch);
            DataAccessFactory.Commit();

}

public SchoolBranch GetById(short id)
    {
        SchoolBranch SchoolBranch = null;

        //  SchoolBranch =  DataAccessFactory.GetSchoolBranchsRepository.First(_SchoolBranch => _SchoolBranch.SchoolBranchID == id);

        return SchoolBranch;
    }

    public IList<SchoolBranch> GetAll()
    {
        IEnumerable<SchoolBranch> SchoolBranchs = null;

        SchoolBranchs = DataAccessFactory.GetSchoolBranchsRepository.GetAll();

        IList<SchoolBranch> result = SchoolBranchs.ToList<SchoolBranch>();

        return result;
    }
		
    public IEnumerable<SchoolBranch> Find(Expression<Func<SchoolBranch, bool>> @where, params Expression<Func<SchoolBranch, object>>[] includes)
    {
        return  DataAccessFactory.GetSchoolBranchsRepository.Find(@where, includes);
    }
		



        		

}

}
