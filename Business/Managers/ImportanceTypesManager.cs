//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class ImportanceTypesManager : BusinessComponentBase, IImportanceTypesManager
{


    public ImportanceTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(ImportanceType ImportanceType)
    {

DataAccessFactory.GetImportanceTypesRepository.Add(ImportanceType);
            DataAccessFactory.Commit();

}

public void Update(ImportanceType ImportanceType)
    {

DataAccessFactory.GetImportanceTypesRepository.Update(ImportanceType);
        DataAccessFactory.Commit();

}

public void Delete(ImportanceType ImportanceType)
    {

DataAccessFactory.GetImportanceTypesRepository.Delete(ImportanceType);
            DataAccessFactory.Commit();

}

public ImportanceType GetById(short id)
    {
        ImportanceType ImportanceType = null;

        //  ImportanceType =  DataAccessFactory.GetImportanceTypesRepository.First(_ImportanceType => _ImportanceType.ImportanceTypeID == id);

        return ImportanceType;
    }

    public IList<ImportanceType> GetAll()
    {
        IEnumerable<ImportanceType> ImportanceTypes = null;

        ImportanceTypes = DataAccessFactory.GetImportanceTypesRepository.GetAll();

        IList<ImportanceType> result = ImportanceTypes.ToList<ImportanceType>();

        return result;
    }
		
    public IEnumerable<ImportanceType> Find(Expression<Func<ImportanceType, bool>> @where, params Expression<Func<ImportanceType, object>>[] includes)
    {
        return  DataAccessFactory.GetImportanceTypesRepository.Find(@where, includes);
    }
		



        		

}

}
