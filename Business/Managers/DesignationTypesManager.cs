//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class DesignationTypesManager : BusinessComponentBase, IDesignationTypesManager
{


    public DesignationTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(DesignationType DesignationType)
    {

DataAccessFactory.GetDesignationTypesRepository.Add(DesignationType);
            DataAccessFactory.Commit();

}

public void Update(DesignationType DesignationType)
    {

DataAccessFactory.GetDesignationTypesRepository.Update(DesignationType);
        DataAccessFactory.Commit();

}

public void Delete(DesignationType DesignationType)
    {

DataAccessFactory.GetDesignationTypesRepository.Delete(DesignationType);
            DataAccessFactory.Commit();

}

public DesignationType GetById(short id)
    {
        DesignationType DesignationType = null;

        //  DesignationType =  DataAccessFactory.GetDesignationTypesRepository.First(_DesignationType => _DesignationType.DesignationTypeID == id);

        return DesignationType;
    }

    public IList<DesignationType> GetAll()
    {
        IEnumerable<DesignationType> DesignationTypes = null;

        DesignationTypes = DataAccessFactory.GetDesignationTypesRepository.GetAll();

        IList<DesignationType> result = DesignationTypes.ToList<DesignationType>();

        return result;
    }
		
    public IEnumerable<DesignationType> Find(Expression<Func<DesignationType, bool>> @where, params Expression<Func<DesignationType, object>>[] includes)
    {
        return  DataAccessFactory.GetDesignationTypesRepository.Find(@where, includes);
    }
		



        		

}

}
