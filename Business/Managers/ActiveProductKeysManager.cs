//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class ActiveProductKeysManager : BusinessComponentBase, IActiveProductKeysManager
{


    public ActiveProductKeysManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(ActiveProductKey ActiveProductKey)
    {

DataAccessFactory.GetActiveProductKeysRepository.Add(ActiveProductKey);
            DataAccessFactory.Commit();

}

public void Update(ActiveProductKey ActiveProductKey)
    {

DataAccessFactory.GetActiveProductKeysRepository.Update(ActiveProductKey);
        DataAccessFactory.Commit();

}

public void Delete(ActiveProductKey ActiveProductKey)
    {

DataAccessFactory.GetActiveProductKeysRepository.Delete(ActiveProductKey);
            DataAccessFactory.Commit();

}

public ActiveProductKey GetById(short id)
    {
        ActiveProductKey ActiveProductKey = null;

        //  ActiveProductKey =  DataAccessFactory.GetActiveProductKeysRepository.First(_ActiveProductKey => _ActiveProductKey.ActiveProductKeyID == id);

        return ActiveProductKey;
    }

    public IList<ActiveProductKey> GetAll()
    {
        IEnumerable<ActiveProductKey> ActiveProductKeys = null;

        ActiveProductKeys = DataAccessFactory.GetActiveProductKeysRepository.GetAll();

        IList<ActiveProductKey> result = ActiveProductKeys.ToList<ActiveProductKey>();

        return result;
    }
		
    public IEnumerable<ActiveProductKey> Find(Expression<Func<ActiveProductKey, bool>> @where, params Expression<Func<ActiveProductKey, object>>[] includes)
    {
        return  DataAccessFactory.GetActiveProductKeysRepository.Find(@where, includes);
    }
		



        		

}

}
