//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AttendanceTypesManager : BusinessComponentBase, IAttendanceTypesManager
{


    public AttendanceTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AttendanceType AttendanceType)
    {

DataAccessFactory.GetAttendanceTypesRepository.Add(AttendanceType);
            DataAccessFactory.Commit();

}

public void Update(AttendanceType AttendanceType)
    {

DataAccessFactory.GetAttendanceTypesRepository.Update(AttendanceType);
        DataAccessFactory.Commit();

}

public void Delete(AttendanceType AttendanceType)
    {

DataAccessFactory.GetAttendanceTypesRepository.Delete(AttendanceType);
            DataAccessFactory.Commit();

}

public AttendanceType GetById(short id)
    {
        AttendanceType AttendanceType = null;

        //  AttendanceType =  DataAccessFactory.GetAttendanceTypesRepository.First(_AttendanceType => _AttendanceType.AttendanceTypeID == id);

        return AttendanceType;
    }

    public IList<AttendanceType> GetAll()
    {
        IEnumerable<AttendanceType> AttendanceTypes = null;

        AttendanceTypes = DataAccessFactory.GetAttendanceTypesRepository.GetAll();

        IList<AttendanceType> result = AttendanceTypes.ToList<AttendanceType>();

        return result;
    }
		
    public IEnumerable<AttendanceType> Find(Expression<Func<AttendanceType, bool>> @where, params Expression<Func<AttendanceType, object>>[] includes)
    {
        return  DataAccessFactory.GetAttendanceTypesRepository.Find(@where, includes);
    }
		



        		

}

}
