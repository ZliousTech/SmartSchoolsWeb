//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class GuardianTypesManager : BusinessComponentBase, IGuardianTypesManager
{


    public GuardianTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(GuardianType GuardianType)
    {

DataAccessFactory.GetGuardianTypesRepository.Add(GuardianType);
            DataAccessFactory.Commit();

}

public void Update(GuardianType GuardianType)
    {

DataAccessFactory.GetGuardianTypesRepository.Update(GuardianType);
        DataAccessFactory.Commit();

}

public void Delete(GuardianType GuardianType)
    {

DataAccessFactory.GetGuardianTypesRepository.Delete(GuardianType);
            DataAccessFactory.Commit();

}

public GuardianType GetById(short id)
    {
        GuardianType GuardianType = null;

        //  GuardianType =  DataAccessFactory.GetGuardianTypesRepository.First(_GuardianType => _GuardianType.GuardianTypeID == id);

        return GuardianType;
    }

    public IList<GuardianType> GetAll()
    {
        IEnumerable<GuardianType> GuardianTypes = null;

        GuardianTypes = DataAccessFactory.GetGuardianTypesRepository.GetAll();

        IList<GuardianType> result = GuardianTypes.ToList<GuardianType>();

        return result;
    }
		
    public IEnumerable<GuardianType> Find(Expression<Func<GuardianType, bool>> @where, params Expression<Func<GuardianType, object>>[] includes)
    {
        return  DataAccessFactory.GetGuardianTypesRepository.Find(@where, includes);
    }
		



        		

}

}
