//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TimetableConditionsManager : BusinessComponentBase, ITimetableConditionsManager
{


    public TimetableConditionsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TimetableCondition TimetableCondition)
    {

DataAccessFactory.GetTimetableConditionsRepository.Add(TimetableCondition);
            DataAccessFactory.Commit();

}

public void Update(TimetableCondition TimetableCondition)
    {

DataAccessFactory.GetTimetableConditionsRepository.Update(TimetableCondition);
        DataAccessFactory.Commit();

}

public void Delete(TimetableCondition TimetableCondition)
    {

DataAccessFactory.GetTimetableConditionsRepository.Delete(TimetableCondition);
            DataAccessFactory.Commit();

}

public TimetableCondition GetById(short id)
    {
        TimetableCondition TimetableCondition = null;

        //  TimetableCondition =  DataAccessFactory.GetTimetableConditionsRepository.First(_TimetableCondition => _TimetableCondition.TimetableConditionID == id);

        return TimetableCondition;
    }

    public IList<TimetableCondition> GetAll()
    {
        IEnumerable<TimetableCondition> TimetableConditions = null;

        TimetableConditions = DataAccessFactory.GetTimetableConditionsRepository.GetAll();

        IList<TimetableCondition> result = TimetableConditions.ToList<TimetableCondition>();

        return result;
    }
		
    public IEnumerable<TimetableCondition> Find(Expression<Func<TimetableCondition, bool>> @where, params Expression<Func<TimetableCondition, object>>[] includes)
    {
        return  DataAccessFactory.GetTimetableConditionsRepository.Find(@where, includes);
    }
		



        		

}

}
