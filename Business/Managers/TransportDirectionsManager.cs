//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TransportDirectionsManager : BusinessComponentBase, ITransportDirectionsManager
{


    public TransportDirectionsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TransportDirection TransportDirection)
    {

DataAccessFactory.GetTransportDirectionsRepository.Add(TransportDirection);
            DataAccessFactory.Commit();

}

public void Update(TransportDirection TransportDirection)
    {

DataAccessFactory.GetTransportDirectionsRepository.Update(TransportDirection);
        DataAccessFactory.Commit();

}

public void Delete(TransportDirection TransportDirection)
    {

DataAccessFactory.GetTransportDirectionsRepository.Delete(TransportDirection);
            DataAccessFactory.Commit();

}

public TransportDirection GetById(short id)
    {
        TransportDirection TransportDirection = null;

        //  TransportDirection =  DataAccessFactory.GetTransportDirectionsRepository.First(_TransportDirection => _TransportDirection.TransportDirectionID == id);

        return TransportDirection;
    }

    public IList<TransportDirection> GetAll()
    {
        IEnumerable<TransportDirection> TransportDirections = null;

        TransportDirections = DataAccessFactory.GetTransportDirectionsRepository.GetAll();

        IList<TransportDirection> result = TransportDirections.ToList<TransportDirection>();

        return result;
    }
		
    public IEnumerable<TransportDirection> Find(Expression<Func<TransportDirection, bool>> @where, params Expression<Func<TransportDirection, object>>[] includes)
    {
        return  DataAccessFactory.GetTransportDirectionsRepository.Find(@where, includes);
    }
		



        		

}

}
