//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class QualificationsManager : BusinessComponentBase, IQualificationsManager
{


    public QualificationsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(Qualification Qualification)
    {

DataAccessFactory.GetQualificationsRepository.Add(Qualification);
            DataAccessFactory.Commit();

}

public void Update(Qualification Qualification)
    {

DataAccessFactory.GetQualificationsRepository.Update(Qualification);
        DataAccessFactory.Commit();

}

public void Delete(Qualification Qualification)
    {

DataAccessFactory.GetQualificationsRepository.Delete(Qualification);
            DataAccessFactory.Commit();

}

public Qualification GetById(short id)
    {
        Qualification Qualification = null;

        //  Qualification =  DataAccessFactory.GetQualificationsRepository.First(_Qualification => _Qualification.QualificationID == id);

        return Qualification;
    }

    public IList<Qualification> GetAll()
    {
        IEnumerable<Qualification> Qualifications = null;

        Qualifications = DataAccessFactory.GetQualificationsRepository.GetAll();

        IList<Qualification> result = Qualifications.ToList<Qualification>();

        return result;
    }
		
    public IEnumerable<Qualification> Find(Expression<Func<Qualification, bool>> @where, params Expression<Func<Qualification, object>>[] includes)
    {
        return  DataAccessFactory.GetQualificationsRepository.Find(@where, includes);
    }
		



        		

}

}
