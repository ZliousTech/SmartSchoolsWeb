//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AppraisalTypesManager : BusinessComponentBase, IAppraisalTypesManager
{


    public AppraisalTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AppraisalType AppraisalType)
    {

DataAccessFactory.GetAppraisalTypesRepository.Add(AppraisalType);
            DataAccessFactory.Commit();

}

public void Update(AppraisalType AppraisalType)
    {

DataAccessFactory.GetAppraisalTypesRepository.Update(AppraisalType);
        DataAccessFactory.Commit();

}

public void Delete(AppraisalType AppraisalType)
    {

DataAccessFactory.GetAppraisalTypesRepository.Delete(AppraisalType);
            DataAccessFactory.Commit();

}

public AppraisalType GetById(short id)
    {
        AppraisalType AppraisalType = null;

        //  AppraisalType =  DataAccessFactory.GetAppraisalTypesRepository.First(_AppraisalType => _AppraisalType.AppraisalTypeID == id);

        return AppraisalType;
    }

    public IList<AppraisalType> GetAll()
    {
        IEnumerable<AppraisalType> AppraisalTypes = null;

        AppraisalTypes = DataAccessFactory.GetAppraisalTypesRepository.GetAll();

        IList<AppraisalType> result = AppraisalTypes.ToList<AppraisalType>();

        return result;
    }
		
    public IEnumerable<AppraisalType> Find(Expression<Func<AppraisalType, bool>> @where, params Expression<Func<AppraisalType, object>>[] includes)
    {
        return  DataAccessFactory.GetAppraisalTypesRepository.Find(@where, includes);
    }
		



        		

}

}
