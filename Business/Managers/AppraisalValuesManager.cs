//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AppraisalValuesManager : BusinessComponentBase, IAppraisalValuesManager
{


    public AppraisalValuesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AppraisalValue AppraisalValue)
    {

DataAccessFactory.GetAppraisalValuesRepository.Add(AppraisalValue);
            DataAccessFactory.Commit();

}

public void Update(AppraisalValue AppraisalValue)
    {

DataAccessFactory.GetAppraisalValuesRepository.Update(AppraisalValue);
        DataAccessFactory.Commit();

}

public void Delete(AppraisalValue AppraisalValue)
    {

DataAccessFactory.GetAppraisalValuesRepository.Delete(AppraisalValue);
            DataAccessFactory.Commit();

}

public AppraisalValue GetById(short id)
    {
        AppraisalValue AppraisalValue = null;

        //  AppraisalValue =  DataAccessFactory.GetAppraisalValuesRepository.First(_AppraisalValue => _AppraisalValue.AppraisalValueID == id);

        return AppraisalValue;
    }

    public IList<AppraisalValue> GetAll()
    {
        IEnumerable<AppraisalValue> AppraisalValues = null;

        AppraisalValues = DataAccessFactory.GetAppraisalValuesRepository.GetAll();

        IList<AppraisalValue> result = AppraisalValues.ToList<AppraisalValue>();

        return result;
    }
		
    public IEnumerable<AppraisalValue> Find(Expression<Func<AppraisalValue, bool>> @where, params Expression<Func<AppraisalValue, object>>[] includes)
    {
        return  DataAccessFactory.GetAppraisalValuesRepository.Find(@where, includes);
    }
		



        		

}

}
