//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AbsenceReasonsManager : BusinessComponentBase, IAbsenceReasonsManager
{


    public AbsenceReasonsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AbsenceReason AbsenceReason)
    {

DataAccessFactory.GetAbsenceReasonsRepository.Add(AbsenceReason);
            DataAccessFactory.Commit();

}

public void Update(AbsenceReason AbsenceReason)
    {

DataAccessFactory.GetAbsenceReasonsRepository.Update(AbsenceReason);
        DataAccessFactory.Commit();

}

public void Delete(AbsenceReason AbsenceReason)
    {

DataAccessFactory.GetAbsenceReasonsRepository.Delete(AbsenceReason);
            DataAccessFactory.Commit();

}

public AbsenceReason GetById(short id)
    {
        AbsenceReason AbsenceReason = null;

        //  AbsenceReason =  DataAccessFactory.GetAbsenceReasonsRepository.First(_AbsenceReason => _AbsenceReason.AbsenceReasonID == id);

        return AbsenceReason;
    }

    public IList<AbsenceReason> GetAll()
    {
        IEnumerable<AbsenceReason> AbsenceReasons = null;

        AbsenceReasons = DataAccessFactory.GetAbsenceReasonsRepository.GetAll();

        IList<AbsenceReason> result = AbsenceReasons.ToList<AbsenceReason>();

        return result;
    }
		
    public IEnumerable<AbsenceReason> Find(Expression<Func<AbsenceReason, bool>> @where, params Expression<Func<AbsenceReason, object>>[] includes)
    {
        return  DataAccessFactory.GetAbsenceReasonsRepository.Find(@where, includes);
    }
		



        		

}

}
