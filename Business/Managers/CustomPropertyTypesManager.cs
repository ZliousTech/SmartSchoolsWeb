//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class CustomPropertyTypesManager : BusinessComponentBase, ICustomPropertyTypesManager
{


    public CustomPropertyTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(CustomPropertyType CustomPropertyType)
    {

DataAccessFactory.GetCustomPropertyTypesRepository.Add(CustomPropertyType);
            DataAccessFactory.Commit();

}

public void Update(CustomPropertyType CustomPropertyType)
    {

DataAccessFactory.GetCustomPropertyTypesRepository.Update(CustomPropertyType);
        DataAccessFactory.Commit();

}

public void Delete(CustomPropertyType CustomPropertyType)
    {

DataAccessFactory.GetCustomPropertyTypesRepository.Delete(CustomPropertyType);
            DataAccessFactory.Commit();

}

public CustomPropertyType GetById(short id)
    {
        CustomPropertyType CustomPropertyType = null;

        //  CustomPropertyType =  DataAccessFactory.GetCustomPropertyTypesRepository.First(_CustomPropertyType => _CustomPropertyType.CustomPropertyTypeID == id);

        return CustomPropertyType;
    }

    public IList<CustomPropertyType> GetAll()
    {
        IEnumerable<CustomPropertyType> CustomPropertyTypes = null;

        CustomPropertyTypes = DataAccessFactory.GetCustomPropertyTypesRepository.GetAll();

        IList<CustomPropertyType> result = CustomPropertyTypes.ToList<CustomPropertyType>();

        return result;
    }
		
    public IEnumerable<CustomPropertyType> Find(Expression<Func<CustomPropertyType, bool>> @where, params Expression<Func<CustomPropertyType, object>>[] includes)
    {
        return  DataAccessFactory.GetCustomPropertyTypesRepository.Find(@where, includes);
    }
		



        		

}

}
