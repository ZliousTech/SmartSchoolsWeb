//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class DocumentCustomPropertysManager : BusinessComponentBase, IDocumentCustomPropertysManager
{


    public DocumentCustomPropertysManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(DocumentCustomProperty DocumentCustomProperty)
    {

DataAccessFactory.GetDocumentCustomPropertysRepository.Add(DocumentCustomProperty);
            DataAccessFactory.Commit();

}

public void Update(DocumentCustomProperty DocumentCustomProperty)
    {

DataAccessFactory.GetDocumentCustomPropertysRepository.Update(DocumentCustomProperty);
        DataAccessFactory.Commit();

}

public void Delete(DocumentCustomProperty DocumentCustomProperty)
    {

DataAccessFactory.GetDocumentCustomPropertysRepository.Delete(DocumentCustomProperty);
            DataAccessFactory.Commit();

}

public DocumentCustomProperty GetById(short id)
    {
        DocumentCustomProperty DocumentCustomProperty = null;

        //  DocumentCustomProperty =  DataAccessFactory.GetDocumentCustomPropertysRepository.First(_DocumentCustomProperty => _DocumentCustomProperty.DocumentCustomPropertyID == id);

        return DocumentCustomProperty;
    }

    public IList<DocumentCustomProperty> GetAll()
    {
        IEnumerable<DocumentCustomProperty> DocumentCustomPropertys = null;

        DocumentCustomPropertys = DataAccessFactory.GetDocumentCustomPropertysRepository.GetAll();

        IList<DocumentCustomProperty> result = DocumentCustomPropertys.ToList<DocumentCustomProperty>();

        return result;
    }
		
    public IEnumerable<DocumentCustomProperty> Find(Expression<Func<DocumentCustomProperty, bool>> @where, params Expression<Func<DocumentCustomProperty, object>>[] includes)
    {
        return  DataAccessFactory.GetDocumentCustomPropertysRepository.Find(@where, includes);
    }
		



        		

}

}
