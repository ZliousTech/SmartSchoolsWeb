//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class TeacherSubjectsManager : BusinessComponentBase, ITeacherSubjectsManager
{


    public TeacherSubjectsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(TeacherSubject TeacherSubject)
    {

DataAccessFactory.GetTeacherSubjectsRepository.Add(TeacherSubject);
            DataAccessFactory.Commit();

}

public void Update(TeacherSubject TeacherSubject)
    {

DataAccessFactory.GetTeacherSubjectsRepository.Update(TeacherSubject);
        DataAccessFactory.Commit();

}

public void Delete(TeacherSubject TeacherSubject)
    {

DataAccessFactory.GetTeacherSubjectsRepository.Delete(TeacherSubject);
            DataAccessFactory.Commit();

}

public TeacherSubject GetById(short id)
    {
        TeacherSubject TeacherSubject = null;

        //  TeacherSubject =  DataAccessFactory.GetTeacherSubjectsRepository.First(_TeacherSubject => _TeacherSubject.TeacherSubjectID == id);

        return TeacherSubject;
    }

    public IList<TeacherSubject> GetAll()
    {
        IEnumerable<TeacherSubject> TeacherSubjects = null;

        TeacherSubjects = DataAccessFactory.GetTeacherSubjectsRepository.GetAll();

        IList<TeacherSubject> result = TeacherSubjects.ToList<TeacherSubject>();

        return result;
    }
		
    public IEnumerable<TeacherSubject> Find(Expression<Func<TeacherSubject, bool>> @where, params Expression<Func<TeacherSubject, object>>[] includes)
    {
        return  DataAccessFactory.GetTeacherSubjectsRepository.Find(@where, includes);
    }
		



        		

}

}

