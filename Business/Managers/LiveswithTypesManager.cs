//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class LiveswithTypesManager : BusinessComponentBase, ILiveswithTypesManager
{


    public LiveswithTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(LiveswithType LiveswithType)
    {

DataAccessFactory.GetLiveswithTypesRepository.Add(LiveswithType);
            DataAccessFactory.Commit();

}

public void Update(LiveswithType LiveswithType)
    {

DataAccessFactory.GetLiveswithTypesRepository.Update(LiveswithType);
        DataAccessFactory.Commit();

}

public void Delete(LiveswithType LiveswithType)
    {

DataAccessFactory.GetLiveswithTypesRepository.Delete(LiveswithType);
            DataAccessFactory.Commit();

}

public LiveswithType GetById(short id)
    {
        LiveswithType LiveswithType = null;

        //  LiveswithType =  DataAccessFactory.GetLiveswithTypesRepository.First(_LiveswithType => _LiveswithType.LiveswithTypeID == id);

        return LiveswithType;
    }

    public IList<LiveswithType> GetAll()
    {
        IEnumerable<LiveswithType> LiveswithTypes = null;

        LiveswithTypes = DataAccessFactory.GetLiveswithTypesRepository.GetAll();

        IList<LiveswithType> result = LiveswithTypes.ToList<LiveswithType>();

        return result;
    }
		
    public IEnumerable<LiveswithType> Find(Expression<Func<LiveswithType, bool>> @where, params Expression<Func<LiveswithType, object>>[] includes)
    {
        return  DataAccessFactory.GetLiveswithTypesRepository.Find(@where, includes);
    }
		



        		

}

}
