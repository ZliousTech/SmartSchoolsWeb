//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class UserTypesManager : BusinessComponentBase, IUserTypesManager
{


    public UserTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(UserType UserType)
    {

DataAccessFactory.GetUserTypesRepository.Add(UserType);
            DataAccessFactory.Commit();

}

public void Update(UserType UserType)
    {

DataAccessFactory.GetUserTypesRepository.Update(UserType);
        DataAccessFactory.Commit();

}

public void Delete(UserType UserType)
    {

DataAccessFactory.GetUserTypesRepository.Delete(UserType);
            DataAccessFactory.Commit();

}

public UserType GetById(short id)
    {
        UserType UserType = null;

        //  UserType =  DataAccessFactory.GetUserTypesRepository.First(_UserType => _UserType.UserTypeID == id);

        return UserType;
    }

    public IList<UserType> GetAll()
    {
        IEnumerable<UserType> UserTypes = null;

        UserTypes = DataAccessFactory.GetUserTypesRepository.GetAll();

        IList<UserType> result = UserTypes.ToList<UserType>();

        return result;
    }
		
    public IEnumerable<UserType> Find(Expression<Func<UserType, bool>> @where, params Expression<Func<UserType, object>>[] includes)
    {
        return  DataAccessFactory.GetUserTypesRepository.Find(@where, includes);
    }
		



        		

}

}
