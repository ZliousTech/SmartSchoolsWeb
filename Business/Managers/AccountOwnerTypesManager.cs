//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class AccountOwnerTypesManager : BusinessComponentBase, IAccountOwnerTypesManager
{


    public AccountOwnerTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(AccountOwnerType AccountOwnerType)
    {

DataAccessFactory.GetAccountOwnerTypesRepository.Add(AccountOwnerType);
            DataAccessFactory.Commit();

}

public void Update(AccountOwnerType AccountOwnerType)
    {

DataAccessFactory.GetAccountOwnerTypesRepository.Update(AccountOwnerType);
        DataAccessFactory.Commit();

}

public void Delete(AccountOwnerType AccountOwnerType)
    {

DataAccessFactory.GetAccountOwnerTypesRepository.Delete(AccountOwnerType);
            DataAccessFactory.Commit();

}

public AccountOwnerType GetById(short id)
    {
        AccountOwnerType AccountOwnerType = null;

        //  AccountOwnerType =  DataAccessFactory.GetAccountOwnerTypesRepository.First(_AccountOwnerType => _AccountOwnerType.AccountOwnerTypeID == id);

        return AccountOwnerType;
    }

    public IList<AccountOwnerType> GetAll()
    {
        IEnumerable<AccountOwnerType> AccountOwnerTypes = null;

        AccountOwnerTypes = DataAccessFactory.GetAccountOwnerTypesRepository.GetAll();

        IList<AccountOwnerType> result = AccountOwnerTypes.ToList<AccountOwnerType>();

        return result;
    }
		
    public IEnumerable<AccountOwnerType> Find(Expression<Func<AccountOwnerType, bool>> @where, params Expression<Func<AccountOwnerType, object>>[] includes)
    {
        return  DataAccessFactory.GetAccountOwnerTypesRepository.Find(@where, includes);
    }
		



        		

}

}
