//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class StudentSchoolDetailsManager : BusinessComponentBase, IStudentSchoolDetailsManager
{


    public StudentSchoolDetailsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(StudentSchoolDetail StudentSchoolDetail)
    {

DataAccessFactory.GetStudentSchoolDetailsRepository.Add(StudentSchoolDetail);
            DataAccessFactory.Commit();

}

public void Update(StudentSchoolDetail StudentSchoolDetail)
    {

DataAccessFactory.GetStudentSchoolDetailsRepository.Update(StudentSchoolDetail);
        DataAccessFactory.Commit();

}

public void Delete(StudentSchoolDetail StudentSchoolDetail)
    {

DataAccessFactory.GetStudentSchoolDetailsRepository.Delete(StudentSchoolDetail);
            DataAccessFactory.Commit();

}

public StudentSchoolDetail GetById(short id)
    {
        StudentSchoolDetail StudentSchoolDetail = null;

        //  StudentSchoolDetail =  DataAccessFactory.GetStudentSchoolDetailsRepository.First(_StudentSchoolDetail => _StudentSchoolDetail.StudentSchoolDetailID == id);

        return StudentSchoolDetail;
    }

    public IList<StudentSchoolDetail> GetAll()
    {
        IEnumerable<StudentSchoolDetail> StudentSchoolDetails = null;

        StudentSchoolDetails = DataAccessFactory.GetStudentSchoolDetailsRepository.GetAll();

        IList<StudentSchoolDetail> result = StudentSchoolDetails.ToList<StudentSchoolDetail>();

        return result;
    }
		
    public IEnumerable<StudentSchoolDetail> Find(Expression<Func<StudentSchoolDetail, bool>> @where, params Expression<Func<StudentSchoolDetail, object>>[] includes)
    {
        return  DataAccessFactory.GetStudentSchoolDetailsRepository.Find(@where, includes);
    }
		



        		

}

}
