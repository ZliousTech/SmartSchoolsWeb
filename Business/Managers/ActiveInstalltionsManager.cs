//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class ActiveInstalltionsManager : BusinessComponentBase, IActiveInstalltionsManager
{


    public ActiveInstalltionsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(ActiveInstalltion ActiveInstalltion)
    {

DataAccessFactory.GetActiveInstalltionsRepository.Add(ActiveInstalltion);
            DataAccessFactory.Commit();

}

public void Update(ActiveInstalltion ActiveInstalltion)
    {

DataAccessFactory.GetActiveInstalltionsRepository.Update(ActiveInstalltion);
        DataAccessFactory.Commit();

}

public void Delete(ActiveInstalltion ActiveInstalltion)
    {

DataAccessFactory.GetActiveInstalltionsRepository.Delete(ActiveInstalltion);
            DataAccessFactory.Commit();

}

public ActiveInstalltion GetById(short id)
    {
        ActiveInstalltion ActiveInstalltion = null;

        //  ActiveInstalltion =  DataAccessFactory.GetActiveInstalltionsRepository.First(_ActiveInstalltion => _ActiveInstalltion.ActiveInstalltionID == id);

        return ActiveInstalltion;
    }

    public IList<ActiveInstalltion> GetAll()
    {
        IEnumerable<ActiveInstalltion> ActiveInstalltions = null;

        ActiveInstalltions = DataAccessFactory.GetActiveInstalltionsRepository.GetAll();

        IList<ActiveInstalltion> result = ActiveInstalltions.ToList<ActiveInstalltion>();

        return result;
    }
		
    public IEnumerable<ActiveInstalltion> Find(Expression<Func<ActiveInstalltion, bool>> @where, params Expression<Func<ActiveInstalltion, object>>[] includes)
    {
        return  DataAccessFactory.GetActiveInstalltionsRepository.Find(@where, includes);
    }
		



        		

}

}
