//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class OtherStudentDetailsManager : BusinessComponentBase, IOtherStudentDetailsManager
{


    public OtherStudentDetailsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(OtherStudentDetail OtherStudentDetail)
    {

DataAccessFactory.GetOtherStudentDetailsRepository.Add(OtherStudentDetail);
            DataAccessFactory.Commit();

}

public void Update(OtherStudentDetail OtherStudentDetail)
    {

DataAccessFactory.GetOtherStudentDetailsRepository.Update(OtherStudentDetail);
        DataAccessFactory.Commit();

}

public void Delete(OtherStudentDetail OtherStudentDetail)
    {

DataAccessFactory.GetOtherStudentDetailsRepository.Delete(OtherStudentDetail);
            DataAccessFactory.Commit();

}

public OtherStudentDetail GetById(short id)
    {
        OtherStudentDetail OtherStudentDetail = null;

        //  OtherStudentDetail =  DataAccessFactory.GetOtherStudentDetailsRepository.First(_OtherStudentDetail => _OtherStudentDetail.OtherStudentDetailID == id);

        return OtherStudentDetail;
    }

    public IList<OtherStudentDetail> GetAll()
    {
        IEnumerable<OtherStudentDetail> OtherStudentDetails = null;

        OtherStudentDetails = DataAccessFactory.GetOtherStudentDetailsRepository.GetAll();

        IList<OtherStudentDetail> result = OtherStudentDetails.ToList<OtherStudentDetail>();

        return result;
    }
		
    public IEnumerable<OtherStudentDetail> Find(Expression<Func<OtherStudentDetail, bool>> @where, params Expression<Func<OtherStudentDetail, object>>[] includes)
    {
        return  DataAccessFactory.GetOtherStudentDetailsRepository.Find(@where, includes);
    }
		



        		

}

}

