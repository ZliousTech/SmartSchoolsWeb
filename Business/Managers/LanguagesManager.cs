//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class LanguagesManager : BusinessComponentBase, ILanguagesManager
{


    public LanguagesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(Language Language)
    {

DataAccessFactory.GetLanguagesRepository.Add(Language);
            DataAccessFactory.Commit();

}

public void Update(Language Language)
    {

DataAccessFactory.GetLanguagesRepository.Update(Language);
        DataAccessFactory.Commit();

}

public void Delete(Language Language)
    {

DataAccessFactory.GetLanguagesRepository.Delete(Language);
            DataAccessFactory.Commit();

}

public Language GetById(short id)
    {
        Language Language = null;

        //  Language =  DataAccessFactory.GetLanguagesRepository.First(_Language => _Language.LanguageID == id);

        return Language;
    }

    public IList<Language> GetAll()
    {
        IEnumerable<Language> Languages = null;

        Languages = DataAccessFactory.GetLanguagesRepository.GetAll();

        IList<Language> result = Languages.ToList<Language>();

        return result;
    }
		
    public IEnumerable<Language> Find(Expression<Func<Language, bool>> @where, params Expression<Func<Language, object>>[] includes)
    {
        return  DataAccessFactory.GetLanguagesRepository.Find(@where, includes);
    }
		



        		

}

}
