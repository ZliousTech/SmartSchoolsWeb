//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class BookChaptersManager : BusinessComponentBase, IBookChaptersManager
{


    public BookChaptersManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(BookChapter BookChapter)
    {

DataAccessFactory.GetBookChaptersRepository.Add(BookChapter);
            DataAccessFactory.Commit();

}

public void Update(BookChapter BookChapter)
    {

DataAccessFactory.GetBookChaptersRepository.Update(BookChapter);
        DataAccessFactory.Commit();

}

public void Delete(BookChapter BookChapter)
    {

DataAccessFactory.GetBookChaptersRepository.Delete(BookChapter);
            DataAccessFactory.Commit();

}

public BookChapter GetById(short id)
    {
        BookChapter BookChapter = null;

        //  BookChapter =  DataAccessFactory.GetBookChaptersRepository.First(_BookChapter => _BookChapter.BookChapterID == id);

        return BookChapter;
    }

    public IList<BookChapter> GetAll()
    {
        IEnumerable<BookChapter> BookChapters = null;

        BookChapters = DataAccessFactory.GetBookChaptersRepository.GetAll();

        IList<BookChapter> result = BookChapters.ToList<BookChapter>();

        return result;
    }
		
    public IEnumerable<BookChapter> Find(Expression<Func<BookChapter, bool>> @where, params Expression<Func<BookChapter, object>>[] includes)
    {
        return  DataAccessFactory.GetBookChaptersRepository.Find(@where, includes);
    }
		



        		

}

}
