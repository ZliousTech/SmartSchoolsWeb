//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class OccasionTypesManager : BusinessComponentBase, IOccasionTypesManager
{


    public OccasionTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(OccasionType OccasionType)
    {

DataAccessFactory.GetOccasionTypesRepository.Add(OccasionType);
            DataAccessFactory.Commit();

}

public void Update(OccasionType OccasionType)
    {

DataAccessFactory.GetOccasionTypesRepository.Update(OccasionType);
        DataAccessFactory.Commit();

}

public void Delete(OccasionType OccasionType)
    {

DataAccessFactory.GetOccasionTypesRepository.Delete(OccasionType);
            DataAccessFactory.Commit();

}

public OccasionType GetById(short id)
    {
        OccasionType OccasionType = null;

        //  OccasionType =  DataAccessFactory.GetOccasionTypesRepository.First(_OccasionType => _OccasionType.OccasionTypeID == id);

        return OccasionType;
    }

    public IList<OccasionType> GetAll()
    {
        IEnumerable<OccasionType> OccasionTypes = null;

        OccasionTypes = DataAccessFactory.GetOccasionTypesRepository.GetAll();

        IList<OccasionType> result = OccasionTypes.ToList<OccasionType>();

        return result;
    }
		
    public IEnumerable<OccasionType> Find(Expression<Func<OccasionType, bool>> @where, params Expression<Func<OccasionType, object>>[] includes)
    {
        return  DataAccessFactory.GetOccasionTypesRepository.Find(@where, includes);
    }
		



        		

}

}
