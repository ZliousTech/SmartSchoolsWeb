//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class MappedFieldsManager : BusinessComponentBase, IMappedFieldsManager
{


    public MappedFieldsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(MappedField MappedField)
    {

DataAccessFactory.GetMappedFieldsRepository.Add(MappedField);
            DataAccessFactory.Commit();

}

public void Update(MappedField MappedField)
    {

DataAccessFactory.GetMappedFieldsRepository.Update(MappedField);
        DataAccessFactory.Commit();

}

public void Delete(MappedField MappedField)
    {

DataAccessFactory.GetMappedFieldsRepository.Delete(MappedField);
            DataAccessFactory.Commit();

}

public MappedField GetById(short id)
    {
        MappedField MappedField = null;

        //  MappedField =  DataAccessFactory.GetMappedFieldsRepository.First(_MappedField => _MappedField.MappedFieldID == id);

        return MappedField;
    }

    public IList<MappedField> GetAll()
    {
        IEnumerable<MappedField> MappedFields = null;

        MappedFields = DataAccessFactory.GetMappedFieldsRepository.GetAll();

        IList<MappedField> result = MappedFields.ToList<MappedField>();

        return result;
    }
		
    public IEnumerable<MappedField> Find(Expression<Func<MappedField, bool>> @where, params Expression<Func<MappedField, object>>[] includes)
    {
        return  DataAccessFactory.GetMappedFieldsRepository.Find(@where, includes);
    }
		



        		

}

}
