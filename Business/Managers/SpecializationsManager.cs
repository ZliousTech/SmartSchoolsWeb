//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class SpecializationsManager : BusinessComponentBase, ISpecializationsManager
{


    public SpecializationsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(Specialization Specialization)
    {

DataAccessFactory.GetSpecializationsRepository.Add(Specialization);
            DataAccessFactory.Commit();

}

public void Update(Specialization Specialization)
    {

DataAccessFactory.GetSpecializationsRepository.Update(Specialization);
        DataAccessFactory.Commit();

}

public void Delete(Specialization Specialization)
    {

DataAccessFactory.GetSpecializationsRepository.Delete(Specialization);
            DataAccessFactory.Commit();

}

public Specialization GetById(short id)
    {
        Specialization Specialization = null;

        //  Specialization =  DataAccessFactory.GetSpecializationsRepository.First(_Specialization => _Specialization.SpecializationID == id);

        return Specialization;
    }

    public IList<Specialization> GetAll()
    {
        IEnumerable<Specialization> Specializations = null;

        Specializations = DataAccessFactory.GetSpecializationsRepository.GetAll();

        IList<Specialization> result = Specializations.ToList<Specialization>();

        return result;
    }
		
    public IEnumerable<Specialization> Find(Expression<Func<Specialization, bool>> @where, params Expression<Func<Specialization, object>>[] includes)
    {
        return  DataAccessFactory.GetSpecializationsRepository.Find(@where, includes);
    }
		



        		

}

}
