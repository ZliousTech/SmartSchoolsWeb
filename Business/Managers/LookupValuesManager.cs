//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class LookupValuesManager : BusinessComponentBase, ILookupValuesManager
{


    public LookupValuesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(LookupValue LookupValue)
    {

DataAccessFactory.GetLookupValuesRepository.Add(LookupValue);
            DataAccessFactory.Commit();

}

public void Update(LookupValue LookupValue)
    {

DataAccessFactory.GetLookupValuesRepository.Update(LookupValue);
        DataAccessFactory.Commit();

}

public void Delete(LookupValue LookupValue)
    {

DataAccessFactory.GetLookupValuesRepository.Delete(LookupValue);
            DataAccessFactory.Commit();

}

public LookupValue GetById(short id)
    {
        LookupValue LookupValue = null;

        //  LookupValue =  DataAccessFactory.GetLookupValuesRepository.First(_LookupValue => _LookupValue.LookupValueID == id);

        return LookupValue;
    }

    public IList<LookupValue> GetAll()
    {
        IEnumerable<LookupValue> LookupValues = null;

        LookupValues = DataAccessFactory.GetLookupValuesRepository.GetAll();

        IList<LookupValue> result = LookupValues.ToList<LookupValue>();

        return result;
    }
		
    public IEnumerable<LookupValue> Find(Expression<Func<LookupValue, bool>> @where, params Expression<Func<LookupValue, object>>[] includes)
    {
        return  DataAccessFactory.GetLookupValuesRepository.Find(@where, includes);
    }
		



        		

}

}
