//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class SpecialResidenceConditionTypesManager : BusinessComponentBase, ISpecialResidenceConditionTypesManager
{


    public SpecialResidenceConditionTypesManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(SpecialResidenceConditionType SpecialResidenceConditionType)
    {

DataAccessFactory.GetSpecialResidenceConditionTypesRepository.Add(SpecialResidenceConditionType);
            DataAccessFactory.Commit();

}

public void Update(SpecialResidenceConditionType SpecialResidenceConditionType)
    {

DataAccessFactory.GetSpecialResidenceConditionTypesRepository.Update(SpecialResidenceConditionType);
        DataAccessFactory.Commit();

}

public void Delete(SpecialResidenceConditionType SpecialResidenceConditionType)
    {

DataAccessFactory.GetSpecialResidenceConditionTypesRepository.Delete(SpecialResidenceConditionType);
            DataAccessFactory.Commit();

}

public SpecialResidenceConditionType GetById(short id)
    {
        SpecialResidenceConditionType SpecialResidenceConditionType = null;

        //  SpecialResidenceConditionType =  DataAccessFactory.GetSpecialResidenceConditionTypesRepository.First(_SpecialResidenceConditionType => _SpecialResidenceConditionType.SpecialResidenceConditionTypeID == id);

        return SpecialResidenceConditionType;
    }

    public IList<SpecialResidenceConditionType> GetAll()
    {
        IEnumerable<SpecialResidenceConditionType> SpecialResidenceConditionTypes = null;

        SpecialResidenceConditionTypes = DataAccessFactory.GetSpecialResidenceConditionTypesRepository.GetAll();

        IList<SpecialResidenceConditionType> result = SpecialResidenceConditionTypes.ToList<SpecialResidenceConditionType>();

        return result;
    }
		
    public IEnumerable<SpecialResidenceConditionType> Find(Expression<Func<SpecialResidenceConditionType, bool>> @where, params Expression<Func<SpecialResidenceConditionType, object>>[] includes)
    {
        return  DataAccessFactory.GetSpecialResidenceConditionTypesRepository.Find(@where, includes);
    }
		



        		

}

}
