//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.SqlClient;


using DataAccess;
using DataAccess.Base;
using Business.Base;
using Business.Interfaces;
using Objects;


 
namespace Business.Managers
{
public class StudentPaymentsManager : BusinessComponentBase, IStudentPaymentsManager
{


    public StudentPaymentsManager(IDataAccessFactory dataAccessFactory)
        : base(dataAccessFactory)
    {

    }

public void Add(StudentPayment StudentPayment)
    {

DataAccessFactory.GetStudentPaymentsRepository.Add(StudentPayment);
            DataAccessFactory.Commit();

}

public void Update(StudentPayment StudentPayment)
    {

DataAccessFactory.GetStudentPaymentsRepository.Update(StudentPayment);
        DataAccessFactory.Commit();

}

public void Delete(StudentPayment StudentPayment)
    {

DataAccessFactory.GetStudentPaymentsRepository.Delete(StudentPayment);
            DataAccessFactory.Commit();

}

public StudentPayment GetById(short id)
    {
        StudentPayment StudentPayment = null;

        //  StudentPayment =  DataAccessFactory.GetStudentPaymentsRepository.First(_StudentPayment => _StudentPayment.StudentPaymentID == id);

        return StudentPayment;
    }

    public IList<StudentPayment> GetAll()
    {
        IEnumerable<StudentPayment> StudentPayments = null;

        StudentPayments = DataAccessFactory.GetStudentPaymentsRepository.GetAll();

        IList<StudentPayment> result = StudentPayments.ToList<StudentPayment>();

        return result;
    }
		
    public IEnumerable<StudentPayment> Find(Expression<Func<StudentPayment, bool>> @where, params Expression<Func<StudentPayment, object>>[] includes)
    {
        return  DataAccessFactory.GetStudentPaymentsRepository.Find(@where, includes);
    }
		



        		

}

}
